From 3b293f3bf4a4af91979a616df0f3cdde0c52a958 Mon Sep 17 00:00:00 2001
From: Karthik-kolamuri570 <kart91801@gmail.com>
Date: Thu, 20 Mar 2025 17:29:11 +0530
Subject: [PATCH] Updated the code through unnecessary params and acheived
 through req.user

---
 backend/app.js                          |  3 +-
 backend/controller/doctorController.js  |  8 ++--
 backend/controller/patientController.js | 25 ++++++++----
 backend/middleware/auth.js              | 53 +++++++++++++++++++++----
 backend/routes/doctorRoutes.js          |  6 +--
 backend/routes/patientRoutes.js         |  6 +--
 6 files changed, 76 insertions(+), 25 deletions(-)

diff --git a/backend/app.js b/backend/app.js
index d198c9e..8a2b55c 100644
--- a/backend/app.js
+++ b/backend/app.js
@@ -37,7 +37,7 @@ const store = new mongoDBStore({
 app.use(session({
     secret: process.env.SESSION_SECRET,
     resave: false,
-    saveUninitialized: false,
+    saveUninitialized: true,
     store: store
 }));
 
@@ -48,5 +48,6 @@ app.use('/api/doctor/', doctorRoutes);
 
 app.use((req, res, next) => {
     console.log('Session:', req.session);
+    console.log(req.user);
     next();
 });
diff --git a/backend/controller/doctorController.js b/backend/controller/doctorController.js
index 4eee259..fc1b26a 100644
--- a/backend/controller/doctorController.js
+++ b/backend/controller/doctorController.js
@@ -114,6 +114,7 @@ exports.loginDoctor = async (req, res, next) => {
     );
     req.session.doctorLogin=req.body;
     req.session.isDoctorLoggedIn=true;
+    req.session.doctorId=doctor._id;
     res.status(200).json({
       success: true,
       token,
@@ -245,7 +246,7 @@ exports.deleteDoctor = async (req, res, next) => {
 exports.updateAvailability = async (req, res, next) => {
     try {
         const { fromTime, toTime } = req.body;
-        const doctorId = req.params.id;
+        const doctorId = req.user._id;
 
         if (!fromTime || !toTime) {
             return res.status(400).json({
@@ -281,7 +282,8 @@ exports.updateAvailability = async (req, res, next) => {
 };
 exports.getDoctorAppointments = async (req, res, next) => {
     try {
-        const appointments = await Appointment.find({ doctorId: req.params.doctorId });
+      console.log(req.user._id.toString());
+        const appointments = await Appointment.find({ doctorId: req.user._id }).populate('patientId');
         if(!appointments){
             res.status(500).json({
                 success: false,
@@ -303,7 +305,7 @@ exports.getDoctorAppointments = async (req, res, next) => {
 
 exports.getDoctorPatients = async (req, res, next) => {
     try {
-        const patients = await Appointment.find({ doctorId: req.params.doctorId }).select('patientId').populate('patientId');
+        const patients = await Appointment.find({ doctorId: req.user._id }).select('patientId')
         if(!patients){
             res.status(500).json({
                 success: false,
diff --git a/backend/controller/patientController.js b/backend/controller/patientController.js
index 68d24c4..cf6df16 100644
--- a/backend/controller/patientController.js
+++ b/backend/controller/patientController.js
@@ -34,6 +34,8 @@ exports.registerPatient = async (req, res) => {
         // Save patient
         await newPatient.save();
         req.session.patientRegister=req.body;
+        
+
         res.status(201).json({
             success: true,
             message: "Patient registered successfully",
@@ -71,10 +73,12 @@ exports.loginPatient = async (req, res) => {
             });
         }
         if(req.body.email ==="kart91801@gmail.com") {
-            req.session.isAdminLoggedIn=true;
+            req.session.isAdminLoggedIn = true;
+            req.session.adminId = patient._id;
         }
 
         req.session.PatientLogin=req.body;
+        req.session.patientId=patient._id;
         req.session.isPatientLoggedIn=true;
 
         // Generate token
@@ -96,6 +100,7 @@ exports.loginPatient = async (req, res) => {
 
             }
         });
+        console.log(req.user);
     } catch (error) {
         console.error(error);
         res.status(500).json({
@@ -175,10 +180,10 @@ exports.updatePatient = async (req, res) => {
 exports.bookAppointment = async (req, res) => {
     try {
         console.log('Under Booked Appointment Controller');
-        const { patientId } = req.params;
+        const patientId  = req.user._id.toString();
         const { doctorId, problem, date, time } = req.body;
         console.log(patientId, doctorId, problem, date, time);
-        
+        console.log(req.user._id.toString())
         if (!patientId || !doctorId || !problem || !date || !time) {
             return res.status(400).json({
                 success: false,
@@ -270,7 +275,8 @@ exports.bookAppointment = async (req, res) => {
 
 exports.getPatientAppointments = async (req, res) => {
     try {
-        const { patientId } = req.params;
+        const patientId = req.user._id;
+        console.log("Patient ID:", patientId);
 
         if (!patientId) {
             return res.status(400).json({
@@ -278,13 +284,16 @@ exports.getPatientAppointments = async (req, res) => {
                 message: "Patient ID is required"
             });
         }
-        const appointments = await Appointment.find({ patientId }).populate('doctorId', 'specialization');
-        if (!appointments) {
+
+        const appointments = await Appointment.find({ patientId }).populate('doctorId', 'name specialization');
+        
+        if (!appointments || appointments.length === 0) {
             return res.status(404).json({
                 success: false,
                 message: "No appointments found for this patient"
             });
         }
+
         res.status(200).json({
             success: true,
             data: appointments
@@ -375,7 +384,7 @@ exports.cancelAppointment=async(req,res)=>{
 }
 exports.getNotifications=async(req,res)=>{
     try{
-        const {patientId}=req.params;
+        const {patientId}=req.user._id;
         const patient=await Patient.findById(patientId);
         if(!patient){
             return res.status(404).json({
@@ -400,7 +409,7 @@ exports.getNotifications=async(req,res)=>{
 
 exports.markNotificationAsSeen=async(req,res)=>{
     try{
-        const {patientId}=req.params;
+        const {patientId}=req.user._id;
         const patient=await Patient.findById(patientId);
         if(!patient){
             return res.status(404).json({
diff --git a/backend/middleware/auth.js b/backend/middleware/auth.js
index 22734e2..117647d 100644
--- a/backend/middleware/auth.js
+++ b/backend/middleware/auth.js
@@ -1,3 +1,6 @@
+const Patient = require('../models/patient'); // Adjust the path as needed
+const Doctor = require('../models/doctor'); // Adjust the path as needed
+// const Admin = require('../model/adminModel'); // Adjust the path as needed
 exports.patientAuth = async (req, res, next) => {
     console.log("Checking patient authentication");
     console.log("Session:", req.session);
@@ -5,8 +8,22 @@ exports.patientAuth = async (req, res, next) => {
         console.log("Unauthorized Access - Returning 401");
         return res.status(401).redirect('/api/patient/login');
     }
-    console.log("Patient is authenticated");
-    next();
+    try {
+        const patient = await Patient.findById(req.session.patientId);
+        if (!patient) {
+            console.log("in assigning the patient to the req.user is failed")
+            return res.status(401).redirect('/api/patient/login');
+        }
+        console.log("in assigning the patient to the req.user is success")
+        req.user = patient;
+        
+        console.log(req.user._id.toString());
+        console.log("Patient is authenticated");
+        next();
+    } catch (error) {
+        console.error("Error in patient authentication:", error);
+        res.status(500).json({ success: false, message: "Internal server error" });
+    }
 };
 
 exports.doctorAuth = async (req, res, next) => {
@@ -16,17 +33,39 @@ exports.doctorAuth = async (req, res, next) => {
         console.log("Unauthorized Access - Returning 401");
         return res.status(401).redirect('/api/doctor/login');
     }
-    console.log("Doctor is authenticated");
-    next();
+    try {
+        const doctor = await Doctor.findById(req.session.doctorId);
+        if (!doctor) {
+            return res.status(401).redirect('/api/doctor/login');
+        }
+        req.user = doctor;
+        console.log(req.user._id.toString());
+        console.log("Doctor is authenticated");
+        next();
+    } catch (error) {
+        console.error("Error in doctor authentication:", error);
+        res.status(500).json({ success: false, message: "Internal server error" });
+    }
 };
 
 exports.adminAuth = async (req, res, next) => {
     console.log("Checking admin authentication");
     console.log("Session:", req.session);
-    if (!req.session ||!req.session.isAdminLoggedIn) {
+    if (!req.session || !req.session.isAdminLoggedIn) {
         console.log("Unauthorized Access - Returning 401");
         return res.status(401).json({ success: false, message: "Unauthorized access. Please log in as an admin." });
     }
-    console.log("Admin is authenticated");
-    next();
+    try {
+        const admin = await Admin.findById(req.session.adminId);
+        if (!admin) {
+            return res.status(401).json({ success: false, message: "Unauthorized access. Please log in as an admin." });
+        }
+        req.user = admin;
+        console.log("Admin is authenticated");
+        next();
+    } catch (error) {
+        console.error("Error in admin authentication:", error);
+        res.status(500).json({ success: false, message: "Internal server error" });
+    }
 };
+
diff --git a/backend/routes/doctorRoutes.js b/backend/routes/doctorRoutes.js
index 17cbaca..ea92e86 100644
--- a/backend/routes/doctorRoutes.js
+++ b/backend/routes/doctorRoutes.js
@@ -21,9 +21,9 @@ router.get('/', doctorController.getAllDoctors);
 router.delete('/:id', doctorController.deleteDoctor);
 
 // Update doctor availability
-router.put('/availability/:id',auth.adminAuth, doctorController.updateAvailability);
-router.get('/appointments/:doctorId',auth.doctorAuth, doctorController.getDoctorAppointments);
-router.get('/patients/:doctorId', auth.doctorAuth, doctorController.getDoctorPatients);
+router.put('/availability/',auth.adminAuth, doctorController.updateAvailability);
+router.get('/appointments/',auth.doctorAuth, doctorController.getDoctorAppointments);
+router.get('/patients/', auth.doctorAuth, doctorController.getDoctorPatients);
 router.get('/specializations/:specialization', doctorController.getDoctorBySpecialization);
 router.get('/location/:location', doctorController.getDoctorByLocation); // Corrected the path
 
diff --git a/backend/routes/patientRoutes.js b/backend/routes/patientRoutes.js
index a95e0c8..72bb134 100644
--- a/backend/routes/patientRoutes.js
+++ b/backend/routes/patientRoutes.js
@@ -4,11 +4,11 @@ const patientController=require('../controller/patientController');
 const auth=require('../middleware/auth');
 router.post('/register',patientController.registerPatient);
 router.post('/login',patientController.loginPatient);
-router.get('/:patientId',auth.patientAuth,patientController.getPatientById);
+// router.get('/:patientId',auth.patientAuth,patientController.getPatientById);
 // router.get('/',patientController.getAllPatients);
 router.put('/:patientId',auth.patientAuth,patientController.updatePatient);
-router.post('/book-appointment/:patientId',auth.patientAuth,patientController.bookAppointment);
-router.get('/appointments/:patientId',auth.patientAuth,patientController.getPatientAppointments);
+router.post('/book-appointment/',auth.patientAuth,patientController.bookAppointment);
+router.get('/appointments/',auth.patientAuth,patientController.getPatientAppointments);
 router.post('/cancel-appointment/:appointmentId',auth.patientAuth,patientController.cancelAppointment);
 router.get('/notifications/:patientId',auth.patientAuth,patientController.getNotifications);
 router.post('/notifications/:patientId',auth.patientAuth,patientController.markNotificationAsSeen);
-- 
2.43.0.windows.1

